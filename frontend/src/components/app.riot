<app>
  <div class="search">
    <template if={state.records}>
      <div class="d-flex justify-content-between">
        <div class="d-flex justify-content-start">
          <watchlist-nav
            on-open={event => openWatchlist(event)}
            on-clear={event => clearWatchlist(event)}
          />
        </div>

        <div class="d-flex flex-column w-70 align-content-end">
          <dfk-input
            type="text"
            name="artist"
            update-handler={onDelayedInput}
            value={state.criteria.artist}
            class="d-block w-50 align-self-end"
          />

          <register
            aggregation={state.aggs.letters}
            value={state.criteria.letter}
            on-change={onInput}
            class="dfk-sans-serif align-self-end"
          />


          <!-- <live-search
            name="search"
            lookup={lookup}
            label={state.criteria.artist}
            value={state.criteria.artist}
            render-suggestion={renderSuggestion}
            applySuggestToLabel={applySuggestToValue}
            applySuggestToValue={applySuggestToValue}
          /> -->

          <!-- <div class="d-flex justify-content-end mt-3">
            <button
              class="light"
              onclick={event => reset(event)}
            >{cap(t('reset'))}</button>
            <button
              class="default ml-2"
              onclick={event => search(event)}
            >{cap(t('search'))}</button>
          </div> -->
        </div>
      </div>

      <div class="mt-6">{state.total} {resultsLabel()}</div>

      <dfk-pagination
        class="mt-3 pb-3 border-bottom justify-content-start"
        page={state.criteria.page}
        total={state.total}
        per-page={20}
        page-to={onInput}
        first-label={t('first_page')}
        previous-label={t('prev_page')}
        next-label={t('next_page')}
        last-label={t('last_page')}
      />

      <ul class="list-unstyled">
        <li
          each={record in state.records}
          record={record}
          is="search-result"
          class="py-3 border-bottom dfk-sans-serif"
          watchlist-toggle={true}
        ></li>
      </ul>
    </template>
  </div>

  <buehler-popup
    open={state.watchlistOpen}
    on-close={event => closeWatchlist(event)}>
  </bueler-popup>

  <script>
    import {i18n, Url} from '@wendig/lib'

    import search from '../lib/search'
    import watchlist from '../lib/watchlist'

    import {UrlSearch, params} from '@dfk-paris/frontend/src/lib/url_search'
    import DfkInput from '@dfk-paris/frontend/src/components/input.riot'
    import DfkPagination from '@dfk-paris/frontend/src/components/pagination.riot'

    // import LiveSearch from './live_search.riot'
    import Popup from './popup.riot'
    import Register from './register.riot'
    import SearchResult from './search_result.riot'
    import WatchlistNav from './watchlist_nav.riot'

    export default class {
      static components = {
        'buehler-popup': Popup,
        DfkInput,
        DfkPagination,
        // LiveSearch,
        SearchResult,
        Register,
        WatchlistNav
      }

      constructor() {
        this.urlSearch = new UrlSearch(this)
        this.i18n = i18n

        this.onSearch = this.onSearch.bind(this)
        this.lookup = this.lookup.bind(this)
        this.renderSuggestion = this.renderSuggestion.bind(this)
        this.applySuggestToLabel = this.applySuggestToLabel.bind(this)
        this.applySuggestToValue = this.applySuggestToValue.bind(this)
      }

      onBeforeMount(props, state) {
        this.state = {
          watchlistOpen: false
        }

        this.urlSearch.setup()
      }

      lookup(terms) {
        return search.query({artist: terms}).then(data => {
          return data.results
        })
      }

      renderSuggestion(item) {
        return item['suggest']
      }

      applySuggestToLabel(item) {
        return item['Name'].split(' (')[0]
      }

      applySuggestToValue(item) {
        return item['Name'].split(', ')[0]
      }

      onUnmounted() {
        this.urlSearch.teardown()
      }

      onSearch(p) {
        if (this.tags) {
          const input = this.tags['dfk-input'][0]
          if (input.reset instanceof HTMLInputElement) input.reset()
        }

        search.query(p).then(data => {
          // console.log(data)

          this.update({
            records: data.results,
            per_page: 10,
            aggs: data.aggs,
            total: data.total
          })
        })
      }

      search(event) {
        event.preventDefault()

        const input = this.tags['live-search'][0]
        const value = input.value() || input.label()

        const url = Url.current()
        Url.setForceFragment()
        url.updateHashParams({artist: value})
        url.apply()
      }

      reset(event) {
        const url = Url.current()
        Url.setForceFragment()
        url.updateHashParams({artist: null, page: null})
        url.apply()
        url.replaceState()
      }

      resultsLabel() {
        return (
          this.state && this.state.total == 1 ?
          i18n.translate('result') :
          i18n.translate('results')
        )
      }

      openWatchlist(event) {
        event.preventDefault()

        this.update({watchlistOpen: true})
      }

      clearWatchlist(event) {
        event.preventDefault()

        watchlist.clear()
      }

      closeWatchlist(event) {
        event.preventDefault()

        this.update({watchlistOpen: false})
      }
    }
  </script>
</app>
